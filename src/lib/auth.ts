import { createClient } from '@/lib/supabase/server'\nimport { createClient as createBrowserClient } from '@/lib/supabase/client'\nimport { redirect } from 'next/navigation'\nimport type { User } from '@supabase/supabase-js'\nimport type { Profile } from '@/lib/types/database'\n\n// Server-side authentication utilities\nexport async function getUser(): Promise<User | null> {\n  const supabase = await createClient()\n  const { data: { user } } = await supabase.auth.getUser()\n  return user\n}\n\nexport async function requireAuth(): Promise<User> {\n  const user = await getUser()\n  if (!user) {\n    redirect('/auth/login')\n  }\n  return user\n}\n\nexport async function getUserProfile(): Promise<Profile | null> {\n  const supabase = await createClient()\n  const { data: { user } } = await supabase.auth.getUser()\n  \n  if (!user) return null\n  \n  const { data: profile } = await supabase\n    .from('profiles')\n    .select('*')\n    .eq('id', user.id)\n    .single()\n  \n  return profile\n}\n\nexport async function requireUserProfile(): Promise<Profile> {\n  const profile = await getUserProfile()\n  if (!profile) {\n    redirect('/auth/login')\n  }\n  return profile\n}\n\n// Client-side authentication utilities\nexport function useSupabase() {\n  return createBrowserClient()\n}\n\nexport async function signInWithGoogle() {\n  const supabase = createBrowserClient()\n  const { error } = await supabase.auth.signInWithOAuth({\n    provider: 'google',\n    options: {\n      redirectTo: `${window.location.origin}/auth/callback`,\n    },\n  })\n  \n  if (error) {\n    throw error\n  }\n}\n\nexport async function signOut() {\n  const supabase = createBrowserClient()\n  const { error } = await supabase.auth.signOut()\n  \n  if (error) {\n    throw error\n  }\n  \n  window.location.href = '/'\n}\n\nexport async function updateProfile(updates: Partial<Profile>) {\n  const supabase = createBrowserClient()\n  const { data: { user } } = await supabase.auth.getUser()\n  \n  if (!user) {\n    throw new Error('User not authenticated')\n  }\n  \n  const { error } = await supabase\n    .from('profiles')\n    .update(updates)\n    .eq('id', user.id)\n  \n  if (error) {\n    throw error\n  }\n}\n\n// Type guards\nexport function isAuthenticated(user: User | null): user is User {\n  return user !== null\n}